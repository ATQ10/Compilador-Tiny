
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 16 11:50:50 CDT 2022
//----------------------------------------------------

package jlexcompiler;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 16 11:50:50 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\002\000\002\005\007\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\004\000" +
    "\002\045\002\000\002\045\005\000\002\004\003\000\002" +
    "\004\002\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\011\012\000\002\044\002\000" +
    "\002\044\004\000\002\012\007\000\002\013\012\000\002" +
    "\014\006\000\002\015\006\000\002\016\005\000\002\017" +
    "\007\000\002\020\004\000\002\036\002\000\002\036\005" +
    "\000\002\021\004\000\002\037\002\000\002\037\005\000" +
    "\002\022\004\000\002\040\002\000\002\040\004\000\002" +
    "\023\003\000\002\023\003\000\002\034\003\000\002\034" +
    "\003\000\002\024\004\000\002\041\002\000\002\041\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\025\004\000\002\042\002\000\002\042\005\000\002\027" +
    "\004\000\002\043\002\000\002\043\005\000\002\032\003" +
    "\000\002\032\003\000\002\031\004\000\002\031\003\000" +
    "\002\030\003\000\002\030\003\000\002\033\005\000\002" +
    "\033\003\000\002\033\003\000\002\035\003\000\002\035" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\030\005\ufffe\006\ufffe\010\014\011\011\012\015\013" +
    "\ufffe\017\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\001\002" +
    "\000\004\013\173\001\002\000\004\013\ufffb\001\002\000" +
    "\022\005\027\006\ufff5\013\026\017\020\023\017\024\025" +
    "\026\024\027\030\001\002\000\022\005\uffff\006\uffff\013" +
    "\uffff\017\uffff\023\uffff\024\uffff\026\uffff\027\uffff\001\002" +
    "\000\004\013\ufffc\001\002\000\004\013\ufffa\001\002\000" +
    "\022\005\027\006\ufff5\013\026\017\020\023\017\024\025" +
    "\026\024\027\030\001\002\000\004\015\165\001\002\000" +
    "\004\015\154\001\002\000\022\005\027\006\ufff5\013\026" +
    "\017\020\023\017\024\025\026\024\027\030\001\002\000" +
    "\022\005\027\006\ufff5\013\026\017\020\023\017\024\025" +
    "\026\024\027\030\001\002\000\022\005\027\006\ufff5\013" +
    "\026\017\020\023\017\024\025\026\024\027\030\001\002" +
    "\000\004\013\146\001\002\000\004\005\027\001\002\000" +
    "\004\040\133\001\002\000\022\005\027\006\ufff5\013\026" +
    "\017\020\023\017\024\025\026\024\027\030\001\002\000" +
    "\022\013\uffdd\015\uffdd\032\uffdd\033\uffdd\043\uffdd\044\uffdd" +
    "\047\042\050\uffdd\001\002\000\004\006\ufff6\001\002\000" +
    "\022\005\027\006\ufff5\013\026\017\020\023\017\024\025" +
    "\026\024\027\030\001\002\000\004\006\040\001\002\000" +
    "\022\005\027\006\ufff5\013\026\017\020\023\017\024\025" +
    "\026\024\027\030\001\002\000\022\005\027\006\ufff5\013" +
    "\026\017\020\023\017\024\025\026\024\027\030\001\002" +
    "\000\004\006\ufff1\001\002\000\004\006\ufff0\001\002\000" +
    "\004\002\000\001\002\000\004\006\ufff3\001\002\000\022" +
    "\013\uffdd\015\uffdd\032\uffdd\033\uffdd\043\uffdd\044\uffdd\047" +
    "\042\050\uffdd\001\002\000\010\007\uffe3\016\uffe3\030\125" +
    "\001\002\000\012\007\uffe0\016\uffe0\030\uffe0\031\120\001" +
    "\002\000\004\007\115\001\002\000\020\013\056\015\065" +
    "\032\062\033\055\043\053\044\064\050\063\001\002\000" +
    "\032\007\uffcd\016\uffcd\030\uffcd\031\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\053\044\064\001" +
    "\002\000\012\007\uffda\016\uffda\030\uffda\031\uffda\001\002" +
    "\000\036\007\uffca\016\uffca\030\uffca\031\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\106\046\103\001\002\000\012\007\uffde\016\uffde\030" +
    "\uffde\031\uffde\001\002\000\014\013\uffc4\015\uffc4\043\uffc4" +
    "\044\uffc4\050\uffc4\001\002\000\010\013\056\015\065\050" +
    "\063\001\002\000\012\007\uffd8\016\uffd8\030\uffd8\031\uffd8" +
    "\001\002\000\036\007\uffc0\016\uffc0\030\uffc0\031\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\001\002\000\036\007\uffc5\016" +
    "\uffc5\030\uffc5\031\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\001" +
    "\002\000\012\007\uffdb\016\uffdb\030\uffdb\031\uffdb\001\002" +
    "\000\026\007\uffd6\016\uffd6\030\uffd6\031\uffd6\034\075\035" +
    "\073\036\072\037\074\041\071\042\076\001\002\000\012" +
    "\007\uffd9\016\uffd9\030\uffd9\031\uffd9\001\002\000\036\007" +
    "\uffc1\016\uffc1\030\uffc1\031\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\001\002\000\014\013\uffc3\015\uffc3\043\uffc3\044\uffc3" +
    "\050\uffc3\001\002\000\022\013\uffdd\015\uffdd\032\uffdd\033" +
    "\uffdd\043\uffdd\044\uffdd\047\042\050\uffdd\001\002\000\004" +
    "\016\067\001\002\000\036\007\uffc2\016\uffc2\030\uffc2\031" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\014\013" +
    "\056\015\065\043\053\044\064\050\063\001\002\000\014" +
    "\013\uffd0\015\uffd0\043\uffd0\044\uffd0\050\uffd0\001\002\000" +
    "\014\013\uffd2\015\uffd2\043\uffd2\044\uffd2\050\uffd2\001\002" +
    "\000\014\013\uffd3\015\uffd3\043\uffd3\044\uffd3\050\uffd3\001" +
    "\002\000\014\013\uffd1\015\uffd1\043\uffd1\044\uffd1\050\uffd1" +
    "\001\002\000\014\013\uffd4\015\uffd4\043\uffd4\044\uffd4\050" +
    "\uffd4\001\002\000\014\013\uffcf\015\uffcf\043\uffcf\044\uffcf" +
    "\050\uffcf\001\002\000\012\007\uffd7\016\uffd7\030\uffd7\031" +
    "\uffd7\001\002\000\026\007\uffd6\016\uffd6\030\uffd6\031\uffd6" +
    "\034\075\035\073\036\072\037\074\041\071\042\076\001" +
    "\002\000\012\007\uffd5\016\uffd5\030\uffd5\031\uffd5\001\002" +
    "\000\036\007\uffc6\016\uffc6\030\uffc6\031\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\001\002\000\014\013\uffc7\015\uffc7\043" +
    "\uffc7\044\uffc7\050\uffc7\001\002\000\032\007\uffcb\016\uffcb" +
    "\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002\000\014\013\056" +
    "\015\065\043\053\044\064\050\063\001\002\000\014\013" +
    "\uffc8\015\uffc8\043\uffc8\044\uffc8\050\uffc8\001\002\000\036" +
    "\007\uffca\016\uffca\030\uffca\031\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\106" +
    "\046\103\001\002\000\032\007\uffc9\016\uffc9\030\uffc9\031" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\001\002\000\026\007\uffce\016\uffce\030" +
    "\uffce\031\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce" +
    "\042\uffce\001\002\000\014\013\056\015\065\043\053\044" +
    "\064\050\063\001\002\000\032\007\uffcd\016\uffcd\030\uffcd" +
    "\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042" +
    "\uffcd\043\053\044\064\001\002\000\026\007\uffcc\016\uffcc" +
    "\030\uffcc\031\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041" +
    "\uffcc\042\uffcc\001\002\000\024\005\uffbe\006\uffbe\013\uffbe" +
    "\017\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\052\117\001" +
    "\002\000\022\005\uffe7\006\uffe7\013\uffe7\017\uffe7\023\uffe7" +
    "\024\uffe7\026\uffe7\027\uffe7\001\002\000\030\005\uffbf\006" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\017\uffbf\023\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\001\002\000\022\013\uffdd\015" +
    "\uffdd\032\uffdd\033\uffdd\043\uffdd\044\uffdd\047\042\050\uffdd" +
    "\001\002\000\010\007\uffe1\016\uffe1\030\uffe1\001\002\000" +
    "\012\007\uffe0\016\uffe0\030\uffe0\031\120\001\002\000\010" +
    "\007\uffdf\016\uffdf\030\uffdf\001\002\000\006\007\uffe4\016" +
    "\uffe4\001\002\000\022\013\uffdd\015\uffdd\032\uffdd\033\uffdd" +
    "\043\uffdd\044\uffdd\047\042\050\uffdd\001\002\000\010\007" +
    "\uffe3\016\uffe3\030\125\001\002\000\006\007\uffe2\016\uffe2" +
    "\001\002\000\020\013\uffdc\015\uffdc\032\uffdc\033\uffdc\043" +
    "\uffdc\044\uffdc\050\uffdc\001\002\000\004\006\132\001\002" +
    "\000\030\005\uffe6\006\uffe6\013\uffe6\017\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\001\002" +
    "\000\022\013\uffdd\015\uffdd\032\uffdd\033\uffdd\043\uffdd\044" +
    "\uffdd\047\042\050\uffdd\001\002\000\004\007\135\001\002" +
    "\000\024\005\uffbe\006\uffbe\013\uffbe\017\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\052\117\001\002\000\022\005\uffe5" +
    "\006\uffe5\013\uffe5\017\uffe5\023\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\001\002\000\004\025\140\001\002\000\004\015\141" +
    "\001\002\000\022\013\uffdd\015\uffdd\032\uffdd\033\uffdd\043" +
    "\uffdd\044\uffdd\047\042\050\uffdd\001\002\000\004\016\143" +
    "\001\002\000\004\007\144\001\002\000\024\005\uffbe\006" +
    "\uffbe\013\uffbe\017\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe" +
    "\052\117\001\002\000\022\005\uffe9\006\uffe9\013\uffe9\017" +
    "\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\001\002\000\004" +
    "\007\147\001\002\000\024\005\uffbe\006\uffbe\013\uffbe\017" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\052\117\001\002" +
    "\000\022\005\uffe8\006\uffe8\013\uffe8\017\uffe8\023\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\001\002\000\004\006\ufff4\001\002" +
    "\000\004\006\uffee\001\002\000\004\006\uffef\001\002\000" +
    "\022\013\uffdd\015\uffdd\032\uffdd\033\uffdd\043\uffdd\044\uffdd" +
    "\047\042\050\uffdd\001\002\000\004\016\156\001\002\000" +
    "\004\020\157\001\002\000\004\005\027\001\002\000\006" +
    "\021\161\022\uffec\001\002\000\004\005\027\001\002\000" +
    "\004\022\163\001\002\000\022\005\uffed\006\uffed\013\uffed" +
    "\017\uffed\023\uffed\024\uffed\026\uffed\027\uffed\001\002\000" +
    "\004\022\uffeb\001\002\000\022\013\uffdd\015\uffdd\032\uffdd" +
    "\033\uffdd\043\uffdd\044\uffdd\047\042\050\uffdd\001\002\000" +
    "\004\016\167\001\002\000\004\005\027\001\002\000\022" +
    "\005\uffea\006\uffea\013\uffea\017\uffea\023\uffea\024\uffea\026" +
    "\uffea\027\uffea\001\002\000\004\006\ufff2\001\002\000\004" +
    "\007\200\001\002\000\006\007\ufff8\014\174\001\002\000" +
    "\004\013\176\001\002\000\004\007\ufff9\001\002\000\006" +
    "\007\ufff8\014\174\001\002\000\004\007\ufff7\001\002\000" +
    "\032\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\017\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\052\117\001" +
    "\002\000\030\005\ufffe\006\ufffe\010\014\011\011\012\015" +
    "\013\ufffe\017\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\001" +
    "\002\000\022\005\ufffd\006\ufffd\013\ufffd\017\ufffd\023\ufffd" +
    "\024\ufffd\026\ufffd\027\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\011\005\012" +
    "\006\007\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\024\004\032\010\030\011\022\012\031\013\015" +
    "\014\034\015\033\016\020\017\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\170" +
    "\010\030\011\022\012\031\013\015\014\034\015\033\016" +
    "\020\017\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\152\010\030\011\022\012\031\013\015\014" +
    "\034\015\033\016\020\017\021\001\001\000\024\004\151" +
    "\010\030\011\022\012\031\013\015\014\034\015\033\016" +
    "\020\017\021\001\001\000\024\004\150\010\030\011\022" +
    "\012\031\013\015\014\034\015\033\016\020\017\021\001" +
    "\001\000\002\001\001\000\004\016\136\001\001\000\002" +
    "\001\001\000\024\004\130\010\030\011\022\012\031\013" +
    "\015\014\034\015\033\016\020\017\021\001\001\000\012" +
    "\020\044\021\042\022\043\040\045\001\001\000\002\001" +
    "\001\000\024\004\040\010\030\011\022\012\031\013\015" +
    "\014\034\015\033\016\020\017\021\001\001\000\002\001" +
    "\001\000\024\004\036\010\030\011\022\012\031\013\015" +
    "\014\034\015\033\016\020\017\021\001\001\000\024\004" +
    "\035\010\030\011\022\012\031\013\015\014\034\015\033" +
    "\016\020\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\127" +
    "\001\001\000\004\036\123\001\001\000\004\037\120\001" +
    "\001\000\002\001\001\000\022\023\051\024\047\025\060" +
    "\027\046\030\053\031\050\033\056\034\057\001\001\000" +
    "\006\030\111\042\110\001\001\000\002\001\001\000\006" +
    "\032\104\043\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\067\041\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\065\021\042\022\043\040" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\077\027\046\030\053\031\050\033\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\067\041\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\053\031\106\033\056\001\001\000\002\001\001" +
    "\000\006\032\104\043\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\112\030\053\031\050\033\056" +
    "\001\001\000\006\030\111\042\113\001\001\000\002\001" +
    "\001\000\004\035\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\121\040\045\001\001\000\002\001" +
    "\001\000\004\037\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\125\022\043\040\045\001\001\000" +
    "\004\036\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\133\021" +
    "\042\022\043\040\045\001\001\000\002\001\001\000\004" +
    "\035\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\141\021\042\022\043\040\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\154\021\042" +
    "\022\043\040\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\157\001\001\000\004\044\161\001\001" +
    "\000\004\016\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\165\021\042\022\043" +
    "\040\045\001\001\000\002\001\001\000\004\016\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\176\001\001\000\002\001\001\000\004" +
    "\035\200\001\001\000\010\003\201\005\012\006\007\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Comentarios ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Comentarios",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Comentarios ::= Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Comentarios",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Factor ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Factor ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= Abre_parentesis B_expresion Cierra_parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SumaOp ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SumaOp",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SumaOp ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SumaOp",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SignoFactor ::= Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SignoFactor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SignoFactor ::= SumaOp Factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SignoFactor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MultOp ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultOp",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MultOp ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultOp",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Termino_2 ::= MultOp SignoFactor Termino_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Termino_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Termino ::= SignoFactor Termino_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Termino",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion_2 ::= SumaOp Termino Expresion_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Termino Expresion_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= Diferente_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= Igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= Mayor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelOp ::= Menor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelOp",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Relacion_2 ::= RelOp Expresion Relacion_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacion_2",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Relacion_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacion_2",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Relacion ::= Expresion Relacion_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bool_value ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Bool_value",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool_value ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Bool_value",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // B_factor ::= Relacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_factor",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // B_factor ::= Bool_value 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_factor",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Not_list ::= Not Not_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not_list",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Not_list ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not_list",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Not_factor ::= Not_list B_factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not_factor",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C_Term ::= And Not_factor C_Term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_Term",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // C_Term ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_Term",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // B_term ::= Not_factor C_Term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_term",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C_expresion ::= Or B_term C_expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_expresion",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C_expresion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_expresion",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // B_expresion ::= B_term C_expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_expresion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asignacion ::= Identificador Igual B_expresion Punto_y_coma Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Asignacion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bloque ::= Abre_llave Lista_sentencias Cierra_llave 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Bloque",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sent_write ::= Write B_expresion Punto_y_coma Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sent_write",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sent_read ::= Read Identificador Punto_y_coma Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sent_read",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Repeticion ::= Do Bloque Until Abre_parentesis B_expresion Cierra_parentesis Punto_y_coma Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Repeticion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Iteracion ::= While Abre_parentesis B_expresion Cierra_parentesis Bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Iteracion",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Else_block ::= Else Bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Else_block",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Else_block ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Else_block",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Seleccion ::= If Abre_parentesis B_expresion Cierra_parentesis Then Bloque Else_block Fi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Seleccion",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencias ::= Asignacion Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencias ::= Bloque Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencias ::= Sent_write Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencias ::= Sent_read Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencias ::= Repeticion Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencias ::= Iteracion Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencias ::= Seleccion Lista_sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lista_sentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_sentencias ::= Sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_id_2 ::= Coma Identificador Lista_id_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_id_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_id_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_id_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_id ::= Identificador Lista_id_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_id",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Tipo ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Tipo ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipo ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaracion ::= Tipo Lista_id Punto_y_coma Comentarios Lista_declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_declaracion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_declaracion ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Lista_declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Program Abre_llave Lista_declaracion Lista_sentencias Cierra_llave 
            {
              Object RESULT =null;
		 
    //System.out.println("Program" + "{}" + "Cierra_llave");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

